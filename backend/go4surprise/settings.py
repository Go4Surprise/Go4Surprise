"""
Django settings for go4surprise project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
from urllib.parse import urlparse
from decouple import config
from google.oauth2 import service_account
import json
from decimal import Decimal

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Get SECRET_KEY from environment variable only
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')

# Raise an error if SECRET_KEY is not set in production
if SECRET_KEY is None:
    # For development/testing only, generate a random key
    import secrets
    SECRET_KEY = secrets.token_urlsafe(50)
    print("WARNING: Using a randomly generated SECRET_KEY. Set DJANGO_SECRET_KEY environment variable for production.")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True') == 'True'

ALLOWED_HOSTS = ['*']

APPENGINE_URL = os.getenv('APPENGINE_URL')
if APPENGINE_URL:
    if not urlparse(APPENGINE_URL).scheme:
        APPENGINE_URL = f'https://{APPENGINE_URL}'
    ALLOWED_HOSTS.append(urlparse(APPENGINE_URL).netloc)
    CSRF_TRUSTED_ORIGINS = [APPENGINE_URL, 
                            "http://localhost:8081",
                            "http://127.0.0.1:8081",]
    SECURE_SSL_REDIRECT = True

CSRF_TRUSTED_ORIGINS = [ "http://localhost:8081",
    "http://127.0.0.1:8081",
    "http://localhost:3000",]

CSRF_COOKIE_DOMAIN = "localhost"
CSRF_COOKIE_SECURE = False


# Application definition

INSTALLED_APPS = [
    'bookings.apps.BookingsConfig',
    'users.apps.UsersConfig',
    'experiences.apps.ExperiencesConfig',
    'reviews.apps.ReviewsConfig',
    'localflavor',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'dj_rest_auth',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'rest_framework.authtoken',
    'rest_framework_swagger',
    'rest_framework',
    'corsheaders',
    'drf_yasg',
    'rest_framework_simplejwt',
    'allauth.socialaccount.providers.google',
    'dj_rest_auth.registration',
    'storages',
]

REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
}

SITE_ID = 1
TOKEN_MODEL = None
REST_USE_JWT = True
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': os.getenv('CLIENT_ID'),
            'secret': os.getenv('SECRET'),
            'key': ''
        }
    }
}

SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'

SOCIALACCOUNT_ADAPTER = 'go4surprise.adapters.CustomSocialAccountAdapter'

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware'
]

# Cross-Origin Resource Sharing
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # Agrega la URL de tu frontend
    "http://localhost:8081",  # Agrega la URL de tu Expo Go
    "http://localhost:8082",
    "capacitator://com.go4surprise.go4app",
    "http://127.0.0.1:8081",
]
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = True # Not recommended for production
CORS_ALLOW_HEADERS = [
    'content-type',
    'authorization',
    'base_url',  # Add this line to allow the custom header
]

GS_PUNTERO = os.getenv('GS_PUNTERO', 'dev')

if APPENGINE_URL:
    CORS_ALLOWED_ORIGINS.append(APPENGINE_URL)
    frontend_url = f"https://{GS_PUNTERO}-go4-frontend-dot-ispp-2425-g10.ew.r.appspot.com"
    CORS_ALLOWED_ORIGINS.append(frontend_url)

ROOT_URLCONF = 'go4surprise.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'go4surprise.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DATABASE_NAME'),
        'USER': os.getenv('POSTGRES_USER'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD'),
        'HOST': os.getenv('DATABASE_URL'),
        'PORT': '5432',
        'OPTIONS': {
            'sslmode': 'require'
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

MEDIA_URL = '/media/'
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        '': {
            'handlers': ['console'],
            'level': 'INFO',
        },
    },
}

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=365 * 100)
}

SWAGGER_SETTINGS = {
    'USE_SESSION_AUTH': False
}

AUTHENTICATION_BACKENDS = (
    'allauth.account.auth_backends.AuthenticationBackend',
)

SITE_ID = 1

# Email server configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' # Eliminate in production
EMAIL_HOST = 'smtp.gmail.com'  # Use your email provider's SMTP server
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = config('EMAIL_HOST_USER')  # Use environment variables in production!
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')  # Use environment variables in production!
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL')

STRIPE_SECRET_KEY = 'sk_test_51QPNbqFSJFG8C7sOxyEAUk2v9hbyiZuFDJPpqQdATQ1DhWZM58Z1eD1qzReX1HpmQiNjWHKWugPeeyv51yGRoHUE003juwGGeN'
STRIPE_PUBLIC_KEY = 'pk_test_51QPNbqFSJFG8C7sO5n4Ooe1Uc2sA827AuPqhc70kYNxiUhW9KW0uE4ccty8YV8v3WRdHjWfbZi2pFEC1XpZmLgRy00dsXZoUeZ'
STRIPE_ENDPOINT_SECRET_DEBUG = 'whsec_xEKdgvDZZA0X2e6rOy4WgUXacJrRVSql'
STRIPE_ENDPOINT_SECRET_PROD = 'whsec_2Lb6gTZHfp1ZyiwP1aB5XSQkV8nafmmp'


# Config Almacenamiento de Archivos en Google Cloud Storage
# Default value for GS_PUNTERO

USE_GCS = os.getenv('USE_GCS', 'False')
if USE_GCS == 'True':
    STORAGES = {
        "default": {"BACKEND": "storages.backends.gcloud.GoogleCloudStorage"},
        "staticfiles": {"BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage"}
    }
    GS_BUCKET_NAME = os.getenv('GS_BUCKET_NAME')
    GS_PROJECT_ID = os.getenv('GS_PROJECT_ID')
    GS_CREDENTIALS = service_account.Credentials.from_service_account_file(
        os.path.join(BASE_DIR, 'gcloud-service-account.json')
    )

# Add a custom JSON encoder for Decimal serialization
class DecimalEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, Decimal):
            return float(obj)
        return super().default(obj)

# Patch the JSON encoder globally
json._default_encoder = DecimalEncoder()